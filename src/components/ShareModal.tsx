import React, { useState } from 'react';
import { X, Share2, Download, Mail, Copy, FileText, Calendar, BarChart3, FileDown } from 'lucide-react';
import { Reading } from '../types/Reading';
import { BloodSugarReading } from '../types/BloodSugar';
import { categorizeBP } from '../utils/bloodPressure';
import { categorizeGlucose } from '../utils/bloodSugar';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

interface ShareModalProps {
  readings: Reading[] | BloodSugarReading[];
  onClose: () => void;
  type?: 'bp' | 'bs';
}

const ShareModal: React.FC<ShareModalProps> = ({ 
  readings, 
  onClose,
  type = 'bp'
}) => {
  const [shareFormat, setShareFormat] = useState<'summary' | 'detailed' | 'chart'>('summary');
  const [dateRange, setDateRange] = useState<'week' | 'month' | 'all'>('month');
  const [exportFormat, setExportFormat] = useState<'pdf' | 'text'>('pdf');
  const [copied, setCopied] = useState(false);

  const isBP = type === 'bp';
  const isBPReadings = (r: any): r is Reading => 'systolic' in r;

  const getFilteredReadings = () => {
    const now = new Date();
    const cutoff = new Date();
    
    if (dateRange === 'week') {
      cutoff.setDate(now.getDate() - 7);
    } else if (dateRange === 'month') {
      cutoff.setMonth(now.getMonth() - 1);
    } else {
      return readings;
    }
    
    return readings.filter(reading => new Date(reading.timestamp) >= cutoff);
  };

  const generateSummaryReport = () => {
    const filteredReadings = getFilteredReadings();
    if (filteredReadings.length === 0) return 'No readings in selected period.';

    if (isBP) {
      const bpReadings = filteredReadings as Reading[];
      const avgSystolic = Math.round(bpReadings.reduce((sum, r) => sum + r.systolic, 0) / bpReadings.length);
      const avgDiastolic = Math.round(bpReadings.reduce((sum, r) => sum + r.diastolic, 0) / bpReadings.length);
      const category = categorizeBP(avgSystolic, avgDiastolic);
      
      const latest = bpReadings[0];
      const latestDate = new Date(latest.timestamp).toLocaleDateString();
      
      return `Blood Pressure Summary Report
Generated: ${new Date().toLocaleDateString()}
Period: ${dateRange === 'week' ? 'Last 7 days' : dateRange === 'month' ? 'Last 30 days' : 'All time'}

üìä OVERVIEW
‚Ä¢ Total Readings: ${bpReadings.length}
‚Ä¢ Average BP: ${avgSystolic}/${avgDiastolic} mmHg
‚Ä¢ Category: ${category.label}
‚Ä¢ Latest Reading: ${latest.systolic}/${latest.diastolic} mmHg (${latestDate})

üéØ HEALTH STATUS
${category.description}

üìà RECENT TRENDS
${bpReadings.length >= 2 ? 
  `Systolic trend: ${bpReadings[0].systolic - bpReadings[1].systolic > 0 ? '‚ÜóÔ∏è Increasing' : bpReadings[0].systolic - bpReadings[1].systolic < 0 ? '‚ÜòÔ∏è Decreasing' : '‚û°Ô∏è Stable'}
Diastolic trend: ${bpReadings[0].diastolic - bpReadings[1].diastolic > 0 ? '‚ÜóÔ∏è Increasing' : bpReadings[0].diastolic - bpReadings[1].diastolic < 0 ? '‚ÜòÔ∏è Decreasing' : '‚û°Ô∏è Stable'}` : 
  'Need more readings for trend analysis'}

Generated by HealthTracker Pro`;
    } else {
      const bsReadings = filteredReadings as BloodSugarReading[];
      const avgGlucose = Math.round(bsReadings.reduce((sum, r) => sum + r.glucose, 0) / bsReadings.length);
      const latest = bsReadings[0];
      const category = categorizeGlucose(latest.glucose, latest.testType);
      
      return `Blood Sugar Summary Report
Generated: ${new Date().toLocaleDateString()}
Period: ${dateRange === 'week' ? 'Last 7 days' : dateRange === 'month' ? 'Last 30 days' : 'All time'}

üìä OVERVIEW
‚Ä¢ Total Readings: ${bsReadings.length}
‚Ä¢ Average Glucose: ${avgGlucose} mg/dL
‚Ä¢ Category: ${category.label}
‚Ä¢ Latest Reading: ${latest.glucose} mg/dL (${latest.testType})

üéØ HEALTH STATUS
${category.description}

üìà RECENT TRENDS
${bsReadings.length >= 2 ? 
  `Glucose trend: ${bsReadings[0].glucose - bsReadings[1].glucose > 0 ? '‚ÜóÔ∏è Increasing' : bsReadings[0].glucose - bsReadings[1].glucose < 0 ? '‚ÜòÔ∏è Decreasing' : '‚û°Ô∏è Stable'}` : 
  'Need more readings for trend analysis'}

Generated by HealthTracker Pro`;
    }
  };

  const generateDetailedReport = () => {
    const filteredReadings = getFilteredReadings();
    if (filteredReadings.length === 0) return 'No readings in selected period.';

    let report = `${isBP ? 'Blood Pressure' : 'Blood Sugar'} Detailed Report
Generated: ${new Date().toLocaleDateString()}
Period: ${dateRange === 'week' ? 'Last 7 days' : dateRange === 'month' ? 'Last 30 days' : 'All time'}

üìã DETAILED READINGS
`;

    filteredReadings.forEach((reading, index) => {
      const date = new Date(reading.timestamp);
      
      if (isBPReadings(reading)) {
        const category = categorizeBP(reading.systolic, reading.diastolic);
        
        report += `
${index + 1}. ${date.toLocaleDateString()} at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
   BP: ${reading.systolic}/${reading.diastolic} mmHg
   Category: ${category.label}`;
        
        if (reading.pulse) report += `\n   Pulse: ${reading.pulse} bpm`;
        if (reading.location) report += `\n   Location: ${reading.location}`;
        if (reading.medication) report += `\n   Medication: ${reading.medication}`;
        if (reading.notes) report += `\n   Notes: ${reading.notes}`;
      } else {
        const bsReading = reading as BloodSugarReading;
        const category = categorizeGlucose(bsReading.glucose, bsReading.testType);
        
        report += `
${index + 1}. ${date.toLocaleDateString()} at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
   Glucose: ${bsReading.glucose} mg/dL
   Test Type: ${bsReading.testType}
   Category: ${category.label}`;
        
        if (bsReading.location) report += `\n   Location: ${bsReading.location}`;
        if (bsReading.medication) report += `\n   Medication: ${bsReading.medication}`;
        if (bsReading.mealInfo) report += `\n   Meal Info: ${bsReading.mealInfo}`;
        if (bsReading.notes) report += `\n   Notes: ${bsReading.notes}`;
      }
    });

    report += `\n\nGenerated by HealthTracker Pro`;
    return report;
  };

  const generateChartData = () => {
    const filteredReadings = getFilteredReadings();
    if (filteredReadings.length === 0) return 'No readings in selected period.';

    let chartData = `${isBP ? 'Blood Pressure' : 'Blood Sugar'} Chart Data (CSV Format)
Generated: ${new Date().toLocaleDateString()}

`;

    if (isBP) {
      chartData += `Date,Time,Systolic,Diastolic,Pulse,Category,Location,Medication,Notes\n`;
      
      (filteredReadings as Reading[]).forEach(reading => {
        const date = new Date(reading.timestamp);
        const category = categorizeBP(reading.systolic, reading.diastolic);
        
        chartData += `${date.toLocaleDateString()},${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })},${reading.systolic},${reading.diastolic},${reading.pulse || ''},${category.label},${reading.location || ''},${reading.medication || ''},"${reading.notes || ''}"\n`;
      });
    } else {
      chartData += `Date,Time,Glucose,TestType,Category,Location,Medication,MealInfo,Notes\n`;
      
      (filteredReadings as BloodSugarReading[]).forEach(reading => {
        const date = new Date(reading.timestamp);
        const category = categorizeGlucose(reading.glucose, reading.testType);
        
        chartData += `${date.toLocaleDateString()},${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })},${reading.glucose},${reading.testType},${category.label},${reading.location || ''},${reading.medication || ''},${reading.mealInfo || ''},"${reading.notes || ''}"\n`;
      });
    }

    return chartData;
  };

  const getReportContent = () => {
    switch (shareFormat) {
      case 'summary':
        return generateSummaryReport();
      case 'detailed':
        return generateDetailedReport();
      case 'chart':
        return generateChartData();
      default:
        return generateSummaryReport();
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(getReportContent());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const generatePDF = () => {
    try {
      const doc = new jsPDF();
      const title = `${isBP ? 'Blood Pressure' : 'Blood Sugar'} ${shareFormat.charAt(0).toUpperCase() + shareFormat.slice(1)} Report`;
      const subtitle = `Generated: ${new Date().toLocaleDateString()} - Period: ${dateRange === 'week' ? 'Last 7 days' : dateRange === 'month' ? 'Last 30 days' : 'All time'}`;
      
      // Add title
      doc.setFontSize(18);
      doc.text(title, 14, 20);
      
      // Add subtitle
      doc.setFontSize(12);
      doc.text(subtitle, 14, 30);
      
      // Add logo/header image
      // doc.addImage(logoUrl, 'PNG', 160, 10, 30, 30);
      
      const filteredReadings = getFilteredReadings();
      
      if (shareFormat === 'summary') {
        // Summary report
        doc.setFontSize(14);
        doc.text('Summary Overview', 14, 45);
        
        if (isBP) {
          const bpReadings = filteredReadings as Reading[];
          const avgSystolic = Math.round(bpReadings.reduce((sum, r) => sum + r.systolic, 0) / bpReadings.length);
          const avgDiastolic = Math.round(bpReadings.reduce((sum, r) => sum + r.diastolic, 0) / bpReadings.length);
          const category = categorizeBP(avgSystolic, avgDiastolic);
          
          const summaryData = [
            ['Total Readings', bpReadings.length.toString()],
            ['Average BP', `${avgSystolic}/${avgDiastolic} mmHg`],
            ['Category', category.label],
            ['Health Status', category.description]
          ];
          
          (doc as any).autoTable({
            startY: 50,
            head: [['Metric', 'Value']],
            body: summaryData,
            theme: 'grid',
            headStyles: { fillColor: [66, 133, 244] }
          });
          
          // Add recent readings
          doc.setFontSize(14);
          doc.text('Recent Readings', 14, (doc as any).lastAutoTable.finalY + 15);
          
          const recentData = bpReadings.slice(0, 5).map(r => {
            const date = new Date(r.timestamp);
            return [
              date.toLocaleDateString(),
              date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              `${r.systolic}/${r.diastolic}`,
              r.pulse || '-',
              categorizeBP(r.systolic, r.diastolic).label
            ];
          });
          
          (doc as any).autoTable({
            startY: (doc as any).lastAutoTable.finalY + 20,
            head: [['Date', 'Time', 'BP (mmHg)', 'Pulse', 'Category']],
            body: recentData,
            theme: 'striped',
            headStyles: { fillColor: [66, 133, 244] }
          });
        } else {
          const bsReadings = filteredReadings as BloodSugarReading[];
          const avgGlucose = Math.round(bsReadings.reduce((sum, r) => sum + r.glucose, 0) / bsReadings.length);
          const latest = bsReadings[0];
          const category = latest ? categorizeGlucose(latest.glucose, latest.testType) : null;
          
          const summaryData = [
            ['Total Readings', bsReadings.length.toString()],
            ['Average Glucose', `${avgGlucose} mg/dL`],
            ['Category', category ? category.label : 'N/A'],
            ['Health Status', category ? category.description : 'N/A']
          ];
          
          (doc as any).autoTable({
            startY: 50,
            head: [['Metric', 'Value']],
            body: summaryData,
            theme: 'grid',
            headStyles: { fillColor: [66, 133, 244] }
          });
          
          // Add recent readings
          doc.setFontSize(14);
          doc.text('Recent Readings', 14, (doc as any).lastAutoTable.finalY + 15);
          
          const recentData = bsReadings.slice(0, 5).map(r => {
            const date = new Date(r.timestamp);
            return [
              date.toLocaleDateString(),
              date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              `${r.glucose} mg/dL`,
              r.testType,
              categorizeGlucose(r.glucose, r.testType).label
            ];
          });
          
          (doc as any).autoTable({
            startY: (doc as any).lastAutoTable.finalY + 20,
            head: [['Date', 'Time', 'Glucose', 'Test Type', 'Category']],
            body: recentData,
            theme: 'striped',
            headStyles: { fillColor: [66, 133, 244] }
          });
        }
      } else if (shareFormat === 'detailed') {
        // Detailed report
        if (isBP) {
          const bpReadings = filteredReadings as Reading[];
          const tableData = bpReadings.map(r => {
            const date = new Date(r.timestamp);
            return [
              date.toLocaleDateString(),
              date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              `${r.systolic}/${r.diastolic}`,
              r.pulse || '-',
              categorizeBP(r.systolic, r.diastolic).label,
              r.location || '-',
              r.medication || '-',
              r.notes || '-'
            ];
          });
          
          (doc as any).autoTable({
            startY: 45,
            head: [['Date', 'Time', 'BP (mmHg)', 'Pulse', 'Category', 'Location', 'Medication', 'Notes']],
            body: tableData,
            theme: 'striped',
            headStyles: { fillColor: [66, 133, 244] },
            columnStyles: {
              7: { cellWidth: 40 } // Make notes column wider
            },
            styles: { overflow: 'linebreak' }
          });
        } else {
          const bsReadings = filteredReadings as BloodSugarReading[];
          const tableData = bsReadings.map(r => {
            const date = new Date(r.timestamp);
            return [
              date.toLocaleDateString(),
              date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              `${r.glucose}`,
              r.testType,
              categorizeGlucose(r.glucose, r.testType).label,
              r.location || '-',
              r.medication || '-',
              r.mealInfo || '-',
              r.notes || '-'
            ];
          });
          
          (doc as any).autoTable({
            startY: 45,
            head: [['Date', 'Time', 'Glucose', 'Test Type', 'Category', 'Location', 'Medication', 'Meal Info', 'Notes']],
            body: tableData,
            theme: 'striped',
            headStyles: { fillColor: [66, 133, 244] },
            columnStyles: {
              8: { cellWidth: 30 } // Make notes column wider
            },
            styles: { overflow: 'linebreak' }
          });
        }
      } else {
        // Chart data (CSV format)
        doc.setFontSize(14);
        doc.text('Chart Data (CSV Format)', 14, 45);
        doc.setFontSize(10);
        
        const csvContent = generateChartData();
        const csvLines = csvContent.split('\n');
        
        let y = 55;
        for (let i = 0; i < Math.min(csvLines.length, 20); i++) {
          doc.text(csvLines[i], 14, y);
          y += 6;
        }
        
        if (csvLines.length > 20) {
          doc.text('... (truncated for PDF preview)', 14, y + 6);
        }
      }
      
      // Add footer
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text(`HealthTracker Pro - Page ${i} of ${pageCount}`, 14, doc.internal.pageSize.height - 10);
        doc.text(`Generated on ${new Date().toLocaleString()}`, doc.internal.pageSize.width - 90, doc.internal.pageSize.height - 10);
      }
      
      // Save the PDF
      doc.save(`healthtracker-${isBP ? 'bp' : 'bs'}-report-${shareFormat}-${dateRange}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    }
  };

  const downloadReport = () => {
    if (exportFormat === 'pdf') {
      generatePDF();
    } else {
      const content = getReportContent();
      const filename = `healthtracker-${isBP ? 'bp' : 'bs'}-report-${shareFormat}-${dateRange}-${new Date().toISOString().split('T')[0]}.${shareFormat === 'chart' ? 'csv' : 'txt'}`;
      
      const blob = new Blob([content], { type: shareFormat === 'chart' ? 'text/csv' : 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      link.click();
      URL.revokeObjectURL(url);
    }
  };

  const shareViaEmail = () => {
    const subject = `${isBP ? 'Blood Pressure' : 'Blood Sugar'} Report - ${new Date().toLocaleDateString()}`;
    const body = encodeURIComponent(getReportContent());
    window.open(`mailto:?subject=${subject}&body=${body}`);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-100 dark:border-gray-700">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
              <Share2 className="h-5 w-5 text-blue-600 dark:text-blue-400" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Share Your Data</h2>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
          >
            <X className="h-5 w-5 text-gray-500 dark:text-gray-400" />
          </button>
        </div>

        <div className="p-6 space-y-6">
          {/* Format Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Report Format</label>
            <div className="grid grid-cols-3 gap-3">
              <button
                onClick={() => setShareFormat('summary')}
                className={`flex flex-col items-center p-4 rounded-lg border-2 transition-colors ${
                  shareFormat === 'summary'
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400'
                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                }`}
              >
                <FileText className="h-6 w-6 mb-2" />
                <span className="text-sm font-medium">Summary</span>
                <span className="text-xs text-gray-500 dark:text-gray-400">Key metrics</span>
              </button>
              
              <button
                onClick={() => setShareFormat('detailed')}
                className={`flex flex-col items-center p-4 rounded-lg border-2 transition-colors ${
                  shareFormat === 'detailed'
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400'
                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                }`}
              >
                <Calendar className="h-6 w-6 mb-2" />
                <span className="text-sm font-medium">Detailed</span>
                <span className="text-xs text-gray-500 dark:text-gray-400">All readings</span>
              </button>
              
              <button
                onClick={() => setShareFormat('chart')}
                className={`flex flex-col items-center p-4 rounded-lg border-2 transition-colors ${
                  shareFormat === 'chart'
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400'
                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                }`}
              >
                <BarChart3 className="h-6 w-6 mb-2" />
                <span className="text-sm font-medium">Chart Data</span>
                <span className="text-xs text-gray-500 dark:text-gray-400">CSV format</span>
              </button>
            </div>
          </div>

          {/* Date Range Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Time Period</label>
            <div className="flex space-x-3">
              {[
                { value: 'week', label: 'Last 7 days' },
                { value: 'month', label: 'Last 30 days' },
                { value: 'all', label: 'All time' }
              ].map(({ value, label }) => (
                <button
                  key={value}
                  onClick={() => setDateRange(value as any)}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                    dateRange === value
                      ? 'bg-blue-600 text-white dark:bg-blue-700'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'
                  }`}
                >
                  {label}
                </button>
              ))}
            </div>
          </div>

          {/* Export Format */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Export Format</label>
            <div className="flex space-x-3">
              <button
                onClick={() => setExportFormat('pdf')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  exportFormat === 'pdf'
                    ? 'bg-blue-600 text-white dark:bg-blue-700'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'
                }`}
              >
                <FileDown className="h-4 w-4" />
                <span>PDF Document</span>
              </button>
              <button
                onClick={() => setExportFormat('text')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  exportFormat === 'text'
                    ? 'bg-blue-600 text-white dark:bg-blue-700'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'
                }`}
              >
                <FileText className="h-4 w-4" />
                <span>Text/CSV File</span>
              </button>
            </div>
          </div>

          {/* Preview (only for text format) */}
          {exportFormat === 'text' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Preview</label>
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 max-h-64 overflow-y-auto">
                <pre className="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap font-mono">
                  {getReportContent()}
                </pre>
              </div>
            </div>
          )}

          {/* PDF Preview Message */}
          {exportFormat === 'pdf' && (
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
              <p className="text-sm text-blue-800 dark:text-blue-200">
                <strong>PDF Export:</strong> Your report will be generated as a professional PDF document with formatted tables, charts, and health insights. Click "Download" to generate and save the PDF.
              </p>
            </div>
          )}

          {/* Share Actions */}
          <div className="flex flex-wrap gap-3">
            {exportFormat === 'text' && (
              <button
                onClick={copyToClipboard}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              >
                <Copy className="h-4 w-4" />
                <span>{copied ? 'Copied!' : 'Copy'}</span>
              </button>
            )}
            
            <button
              onClick={downloadReport}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Download className="h-4 w-4" />
              <span>Download {exportFormat === 'pdf' ? 'PDF' : shareFormat === 'chart' ? 'CSV' : 'Text'}</span>
            </button>
            
            {exportFormat === 'text' && (
              <button
                onClick={shareViaEmail}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Mail className="h-4 w-4" />
                <span>Email</span>
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ShareModal;